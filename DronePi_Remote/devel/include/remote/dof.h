// Generated by gencpp from file remote/dof.msg
// DO NOT EDIT!


#ifndef REMOTE_MESSAGE_DOF_H
#define REMOTE_MESSAGE_DOF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace remote
{
template <class ContainerAllocator>
struct dof_
{
  typedef dof_<ContainerAllocator> Type;

  dof_()
    : acc_x(0)
    , acc_y(0)
    , acc_z(0)
    , gyro_x(0)
    , gyro_y(0)
    , gyro_z(0)  {
    }
  dof_(const ContainerAllocator& _alloc)
    : acc_x(0)
    , acc_y(0)
    , acc_z(0)
    , gyro_x(0)
    , gyro_y(0)
    , gyro_z(0)  {
    }



   typedef int32_t _acc_x_type;
  _acc_x_type acc_x;

   typedef int32_t _acc_y_type;
  _acc_y_type acc_y;

   typedef int32_t _acc_z_type;
  _acc_z_type acc_z;

   typedef int32_t _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef int32_t _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef int32_t _gyro_z_type;
  _gyro_z_type gyro_z;




  typedef boost::shared_ptr< ::remote::dof_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::remote::dof_<ContainerAllocator> const> ConstPtr;

}; // struct dof_

typedef ::remote::dof_<std::allocator<void> > dof;

typedef boost::shared_ptr< ::remote::dof > dofPtr;
typedef boost::shared_ptr< ::remote::dof const> dofConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::remote::dof_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::remote::dof_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace remote

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'remote': ['/home/sandy/sandy/ros/DronePi/DronePi_Remote/src/remote/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::remote::dof_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::remote::dof_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote::dof_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote::dof_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote::dof_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote::dof_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::remote::dof_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adacf47aa28973950aae378f344b9c3a";
  }

  static const char* value(const ::remote::dof_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadacf47aa2897395ULL;
  static const uint64_t static_value2 = 0x0aae378f344b9c3aULL;
};

template<class ContainerAllocator>
struct DataType< ::remote::dof_<ContainerAllocator> >
{
  static const char* value()
  {
    return "remote/dof";
  }

  static const char* value(const ::remote::dof_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::remote::dof_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 acc_x\n\
int32 acc_y\n\
int32 acc_z\n\
\n\
int32 gyro_x\n\
int32 gyro_y\n\
int32 gyro_z\n\
";
  }

  static const char* value(const ::remote::dof_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::remote::dof_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct dof_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::remote::dof_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::remote::dof_<ContainerAllocator>& v)
  {
    s << indent << "acc_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acc_z);
    s << indent << "gyro_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gyro_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REMOTE_MESSAGE_DOF_H
